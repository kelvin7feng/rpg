using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.EventSystems;
using UnityEngine.Rendering;

namespace ESRemoteDeviceDebug
{
    public static class UnityComponentPropertyDefine
    {
        public static void AddUnityComponentPropertyDefine()
        {
            AddUIComponentPropertyDefine();
            Add2DComponentPropertyDefine();
            Add3DComponentPropertyDefine();
        }

        static void AddUIComponentPropertyDefine()
        {
            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(Canvas).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("renderMode",
                    (c) => { return (c as Canvas).renderMode; },
                    (c, value) => { (c as Canvas).renderMode = (RenderMode)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(RenderMode); }),
                new ComponentPropertyDefineData("pixelPerfect",
                    (c) => { return (c as Canvas).pixelPerfect; },
                    (c, value) => { (c as Canvas).pixelPerfect = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("worldCamera",
                    (c) => { return (c as Canvas).worldCamera; },
                    null,
                    ChangeDataType.ObjectReference, "RenderCamera",
                    () => { return typeof(Camera); }),
                new ComponentPropertyDefineData("sortingOrder",
                    (c) => { return (c as Canvas).sortingOrder; },
                    (c, value) => { (c as Canvas).sortingOrder = (int)value; },
                    ChangeDataType.Integer, "SortOrder"),
                new ComponentPropertyDefineData("targetDisplay",
                    (c) => { return (c as Canvas).targetDisplay; },
                    (c, value) => { (c as Canvas).targetDisplay = (int)value; },
                    ChangeDataType.TargetDisplay),
                new ComponentPropertyDefineData("planeDistance",
                    (c) => { return (c as Canvas).planeDistance; },
                    (c, value) => { (c as Canvas).planeDistance = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("sortingLayerID",
                    (c) => { return (c as Canvas).sortingLayerID; },
                    (c, value) => { (c as Canvas).sortingLayerID = (int)value; },
                    SortingLayer.layers, "SortingLayer"),
                new ComponentPropertyDefineData("additionalShaderChannels",
                    (c) => { return (c as Canvas).additionalShaderChannels; },
                    (c, value) => { (c as Canvas).additionalShaderChannels = (AdditionalCanvasShaderChannels)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(AdditionalCanvasShaderChannels); }),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(CanvasScaler).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("uiScaleMode",
                    (c) => { return (c as CanvasScaler).uiScaleMode; },
                    (c, value) => { (c as CanvasScaler).uiScaleMode = (CanvasScaler.ScaleMode)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(CanvasScaler.ScaleMode); }),
                new ComponentPropertyDefineData("scaleFactor",
                    (c) => { return (c as CanvasScaler).scaleFactor; },
                    (c, value) => { (c as CanvasScaler).scaleFactor = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("referencePixelsPerUnit",
                    (c) => { return (c as CanvasScaler).referencePixelsPerUnit; },
                    (c, value) => { (c as CanvasScaler).referencePixelsPerUnit = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("referenceResolution",
                    (c) => { return (c as CanvasScaler).referenceResolution; },
                    (c, value) => { (c as CanvasScaler).referenceResolution = (Vector2)value; },
                    ChangeDataType.Vector2),
                new ComponentPropertyDefineData("screenMatchMode",
                    (c) => { return (c as CanvasScaler).screenMatchMode; },
                    (c, value) => { (c as CanvasScaler).screenMatchMode = (CanvasScaler.ScreenMatchMode)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(CanvasScaler.ScreenMatchMode); }),
                new ComponentPropertyDefineData("physicalUnit",
                    (c) => { return (c as CanvasScaler).physicalUnit; },
                    (c, value) => { (c as CanvasScaler).physicalUnit = (CanvasScaler.Unit)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(CanvasScaler.Unit); }),
                new ComponentPropertyDefineData("fallbackScreenDPI",
                    (c) => { return (c as CanvasScaler).fallbackScreenDPI; },
                    (c, value) => { (c as CanvasScaler).fallbackScreenDPI = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("defaultSpriteDPI",
                    (c) => { return (c as CanvasScaler).defaultSpriteDPI; },
                    (c, value) => { (c as CanvasScaler).defaultSpriteDPI = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("matchWidthOrHeight",
                    (c) => { return (c as CanvasScaler).matchWidthOrHeight; },
                    (c, value) => { (c as CanvasScaler).matchWidthOrHeight = (float)value; },
                    ChangeDataType.Float, "Match", null, new RangeValue(0), new RangeValue(1)),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(GraphicRaycaster).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("ignoreReversedGraphics",
                    (c) => { return (c as GraphicRaycaster).ignoreReversedGraphics; },
                    (c, value) => { (c as GraphicRaycaster).ignoreReversedGraphics = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("blockingObjects",
                    (c) => { return (c as GraphicRaycaster).blockingObjects; },
                    (c, value) => { (c as GraphicRaycaster).blockingObjects = (GraphicRaycaster.BlockingObjects)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(GraphicRaycaster.BlockingObjects); }),
                // new ElementData("m_BlockingMask", ChangeDataType.LayerMask)
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(RectTransform).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("localPosition",
                    (c) => { return (c as RectTransform).localPosition; },
                    (c, value) => { (c as RectTransform).localPosition = (Vector3)value; },
                    ChangeDataType.Vector3),
                new ComponentPropertyDefineData("localRotation",
                    (c) => { return (c as RectTransform).localRotation; },
                    (c, value) => { (c as RectTransform).localRotation = (Quaternion)value; },
                    ChangeDataType.Quaternion, "Rotation"),
                new ComponentPropertyDefineData("localScale",
                    (c) => { return (c as RectTransform).localScale; },
                    (c, value) => { (c as RectTransform).localScale = (Vector3)value; },
                    ChangeDataType.Vector3, "Scale"),
                new ComponentPropertyDefineData("sizeDelta",
                    (c) => { return (c as RectTransform).sizeDelta; },
                    (c, value) => { (c as RectTransform).sizeDelta = (Vector2)value; },
                    ChangeDataType.Vector2),
                new ComponentPropertyDefineData("anchorMin",
                    (c) => { return (c as RectTransform).anchorMin; },
                    (c, value) => { (c as RectTransform).anchorMin = (Vector2)value; },
                    ChangeDataType.Vector2, "min"),
                new ComponentPropertyDefineData("anchorMax",
                    (c) => { return (c as RectTransform).anchorMax; },
                    (c, value) => { (c as RectTransform).anchorMax = (Vector2)value; },
                    ChangeDataType.Vector2, "max"),
                new ComponentPropertyDefineData("offsetMin",
                    (c) => { return (c as RectTransform).offsetMin; },
                    (c, value) => { (c as RectTransform).offsetMin = (Vector2)value; },
                    ChangeDataType.Vector2),
                new ComponentPropertyDefineData("offsetMax",
                    (c) => { return (c as RectTransform).offsetMax; },
                    (c, value) => { (c as RectTransform).offsetMax = (Vector2)value; },
                    ChangeDataType.Vector2),
                new ComponentPropertyDefineData("pivot",
                    (c) => { return (c as RectTransform).pivot; },
                    (c, value) => { (c as RectTransform).pivot = (Vector2)value; },
                    ChangeDataType.Vector2),
                new ComponentPropertyDefineData("anchoredPosition",
                    (c) => { return (c as RectTransform).anchoredPosition; },
                    (c, value) => { (c as RectTransform).anchoredPosition = (Vector2)value; },
                    ChangeDataType.Vector2),
                new ComponentPropertyDefineData("rect",
                    (c) => { return (c as RectTransform).rect; },
                    null,
                    ChangeDataType.Rect),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(Image).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("sprite",
                    (c) => { return (c as Image).sprite; },
                    null,
                    ChangeDataType.ObjectReference, "SourceImage",
                    () => { return typeof(Sprite); }),
                new ComponentPropertyDefineData("color",
                    (c) => { return (c as Image).color; },
                    (c, value) => { (c as Image).color = (Color)value; },
                    ChangeDataType.Color),
                new ComponentPropertyDefineData("material",
                    (c) => { return (c as Image).material; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(Material); }),
                new ComponentPropertyDefineData("raycastTarget",
                    (c) => { return (c as Image).raycastTarget; },
                    (c, value) => { (c as Image).raycastTarget = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("type",
                    (c) => { return (c as Image).type; },
                    (c, value) => { (c as Image).type = (Image.Type)value; },
                    ChangeDataType.Enum, "ImageType",
                    () => { return typeof(Image.Type); }),
                new ComponentPropertyDefineData("preserveAspect",
                    (c) => { return (c as Image).preserveAspect; },
                    (c, value) => { (c as Image).preserveAspect = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("fillCenter",
                    (c) => { return (c as Image).fillCenter; },
                    (c, value) => { (c as Image).fillCenter = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("fillMethod",
                    (c) => { return (c as Image).fillMethod; },
                    (c, value) => { (c as Image).fillMethod = (Image.FillMethod)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(Image.FillMethod); }),
                new ComponentPropertyDefineData("fillOrigin",
                    (c) => { return (c as Image).fillOrigin; },
                    (c, value) => { (c as Image).fillOrigin = (int)value; },
                    ChangeDataType.Integer),
                new ComponentPropertyDefineData("fillAmount",
                    (c) => { return (c as Image).fillAmount; },
                    (c, value) => { (c as Image).fillAmount = (float)value; },
                    ChangeDataType.Float, null, null, new RangeValue(0), new RangeValue(1)),
#if UNITY_2018_3_OR_NEWER
                new ComponentPropertyDefineData("useSpriteMesh",
                    (c) => { return (c as Image).useSpriteMesh; },
                    (c, value) => { (c as Image).useSpriteMesh = (bool)value; },
                    ChangeDataType.Boolean),
#endif
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(CanvasRenderer).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("cullTransparentMesh",
                    (c) => { return (c as CanvasRenderer).cullTransparentMesh; },
                    (c, value) => { (c as CanvasRenderer).cullTransparentMesh = (bool)value; },
                    ChangeDataType.Boolean)
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(Button).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("interactable",
                    (c) => { return (c as Button).interactable; },
                    (c, value) => { (c as Button).interactable = (bool)value; },
                    ChangeDataType.Boolean)
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(Text).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("text",
                    (c) => { return (c as Text).text; },
                    (c, value) => { (c as Text).text = (string)value; },
                    ChangeDataType.Text),
                new ComponentPropertyDefineData("fontStyle",
                    (c) => { return (c as Text).fontStyle; },
                    (c, value) => { (c as Text).fontStyle = (FontStyle)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(FontStyle); }),
                new ComponentPropertyDefineData("fontSize",
                    (c) => { return (c as Text).fontSize; },
                    (c, value) => { (c as Text).fontSize = (int)value; },
                    ChangeDataType.Integer),
                new ComponentPropertyDefineData("lineSpacing",
                    (c) => { return (c as Text).lineSpacing; },
                    (c, value) => { (c as Text).lineSpacing = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("supportRichText",
                    (c) => { return (c as Text).supportRichText; },
                    (c, value) => { (c as Text).supportRichText = (bool)value; },
                    ChangeDataType.Boolean, "RichText"),
                new ComponentPropertyDefineData("alignment",
                    (c) => { return (c as Text).alignment; },
                    (c, value) => { (c as Text).alignment = (TextAnchor)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(TextAnchor); }),
                new ComponentPropertyDefineData("alignByGeometry",
                    (c) => { return (c as Text).alignByGeometry; },
                    (c, value) => { (c as Text).alignByGeometry = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("horizontalOverflow",
                    (c) => { return (c as Text).horizontalOverflow; },
                    (c, value) => { (c as Text).horizontalOverflow = (HorizontalWrapMode)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(HorizontalWrapMode); }),
                new ComponentPropertyDefineData("verticalOverflow",
                    (c) => { return (c as Text).verticalOverflow; },
                    (c, value) => { (c as Text).verticalOverflow = (VerticalWrapMode)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(VerticalWrapMode); }),
                new ComponentPropertyDefineData("resizeTextForBestFit",
                    (c) => { return (c as Text).resizeTextForBestFit; },
                    (c, value) => { (c as Text).resizeTextForBestFit = (bool)value; },
                    ChangeDataType.Boolean, "BestFit"),
                new ComponentPropertyDefineData("color",
                    (c) => { return (c as Text).color; },
                    (c, value) => { (c as Text).color = (Color)value; },
                    ChangeDataType.Color),
                new ComponentPropertyDefineData("material",
                    (c) => { return (c as Text).material; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(Material); }),
                new ComponentPropertyDefineData("raycastTarget",
                    (c) => { return (c as Text).raycastTarget; },
                    (c, value) => { (c as Text).raycastTarget = (bool)value; },
                    ChangeDataType.Boolean),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(Outline).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("effectColor",
                    (c) => { return (c as Outline).effectColor; },
                    (c, value) => { (c as Outline).effectColor = (Color)value; },
                    ChangeDataType.Color),
                new ComponentPropertyDefineData("effectDistance",
                    (c) => { return (c as Outline).effectDistance; },
                    (c, value) => { (c as Outline).effectDistance = (Vector2)value; },
                    ChangeDataType.Vector2),
                new ComponentPropertyDefineData("useGraphicAlpha",
                    (c) => { return (c as Outline).useGraphicAlpha; },
                    (c, value) => { (c as Outline).useGraphicAlpha = (bool)value; },
                    ChangeDataType.Boolean),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(Shadow).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("effectColor",
                    (c) => { return (c as Shadow).effectColor; },
                    (c, value) => { (c as Shadow).effectColor = (Color)value; },
                    ChangeDataType.Color),
                new ComponentPropertyDefineData("effectDistance",
                    (c) => { return (c as Shadow).effectDistance; },
                    (c, value) => { (c as Shadow).effectDistance = (Vector2)value; },
                    ChangeDataType.Vector2),
                new ComponentPropertyDefineData("useGraphicAlpha",
                    (c) => { return (c as Shadow).useGraphicAlpha; },
                    (c, value) => { (c as Shadow).useGraphicAlpha = (bool)value; },
                    ChangeDataType.Boolean),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(EventSystem).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("sendNavigationEvents",
                    (c) => { return (c as EventSystem).sendNavigationEvents; },
                    (c, value) => { (c as EventSystem).sendNavigationEvents = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("pixelDragThreshold",
                    (c) => { return (c as EventSystem).pixelDragThreshold; },
                    (c, value) => { (c as EventSystem).pixelDragThreshold = (int)value; },
                    ChangeDataType.Integer, "DragThreshold"),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(StandaloneInputModule).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("horizontalAxis",
                    (c) => { return (c as StandaloneInputModule).horizontalAxis; },
                    (c, value) => { (c as StandaloneInputModule).horizontalAxis = (string)value; },
                    ChangeDataType.String),
                new ComponentPropertyDefineData("verticalAxis",
                    (c) => { return (c as StandaloneInputModule).verticalAxis; },
                    (c, value) => { (c as StandaloneInputModule).verticalAxis = (string)value; },
                    ChangeDataType.String),
                new ComponentPropertyDefineData("submitButton",
                    (c) => { return (c as StandaloneInputModule).submitButton; },
                    (c, value) => { (c as StandaloneInputModule).submitButton = (string)value; },
                    ChangeDataType.String),
                new ComponentPropertyDefineData("cancelButton",
                    (c) => { return (c as StandaloneInputModule).cancelButton; },
                    (c, value) => { (c as StandaloneInputModule).cancelButton = (string)value; },
                    ChangeDataType.String),
                new ComponentPropertyDefineData("inputActionsPerSecond",
                    (c) => { return (c as StandaloneInputModule).inputActionsPerSecond; },
                    (c, value) => { (c as StandaloneInputModule).inputActionsPerSecond = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("repeatDelay",
                    (c) => { return (c as StandaloneInputModule).repeatDelay; },
                    (c, value) => { (c as StandaloneInputModule).repeatDelay = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("forceModuleActive",
                    (c) => { return (c as StandaloneInputModule).forceModuleActive; },
                    (c, value) => { (c as StandaloneInputModule).forceModuleActive = (bool)value; },
                    ChangeDataType.Boolean),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(Slider).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("interactable",
                    (c) => { return (c as Slider).interactable; },
                    (c, value) => { (c as Slider).interactable = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("fillRect",
                    (c) => { return (c as Slider).fillRect; },
                    null,
                    ChangeDataType.ObjectReference),
                new ComponentPropertyDefineData("handleRect",
                    (c) => { return (c as Slider).handleRect; },
                    null,
                    ChangeDataType.ObjectReference),
                new ComponentPropertyDefineData("direction",
                    (c) => { return (c as Slider).direction; },
                    (c, value) => { (c as Slider).direction = (Slider.Direction)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(Slider.Direction); }),
                new ComponentPropertyDefineData("minValue",
                    (c) => { return (c as Slider).minValue; },
                    (c, value) => { (c as Slider).minValue = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("maxValue",
                    (c) => { return (c as Slider).maxValue; },
                    (c, value) => { (c as Slider).maxValue = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("wholeNumbers",
                    (c) => { return (c as Slider).wholeNumbers; },
                    (c, value) => { (c as Slider).wholeNumbers = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("value",
                    (c) => { return (c as Slider).value; },
                    (c, value) => { (c as Slider).value = (float)value; },
                    ChangeDataType.Float),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(InputField).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("interactable",
                    (c) => { return (c as InputField).interactable; },
                    (c, value) => { (c as InputField).interactable = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("textComponent",
                    (c) => { return (c as InputField).textComponent; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(Text); }),
                new ComponentPropertyDefineData("text",
                    (c) => { return (c as InputField).text; },
                    (c, value) => { (c as InputField).text = (string)value; },
                    ChangeDataType.String),
                new ComponentPropertyDefineData("characterLimit",
                    (c) => { return (c as InputField).characterLimit; },
                    (c, value) => { (c as InputField).characterLimit = (int)value; },
                    ChangeDataType.Integer),
                new ComponentPropertyDefineData("contentType",
                    (c) => { return (c as InputField).contentType; },
                    (c, value) => { (c as InputField).contentType = (InputField.ContentType)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(InputField.ContentType); }),
                new ComponentPropertyDefineData("lineType",
                    (c) => { return (c as InputField).lineType; },
                    (c, value) => { (c as InputField).lineType = (InputField.LineType)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(InputField.LineType); }),
                new ComponentPropertyDefineData("inputType",
                    (c) => { return (c as InputField).inputType; },
                    (c, value) => { (c as InputField).inputType = (InputField.InputType)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(InputField.InputType); }),
                new ComponentPropertyDefineData("keyboardType",
                    (c) => { return (c as InputField).keyboardType; },
                    (c, value) => { (c as InputField).keyboardType = (TouchScreenKeyboardType)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(TouchScreenKeyboardType); }),
                new ComponentPropertyDefineData("characterValidation",
                    (c) => { return (c as InputField).characterValidation; },
                    (c, value) => { (c as InputField).characterValidation = (InputField.CharacterValidation)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(InputField.CharacterValidation); }),
                new ComponentPropertyDefineData("placeholder",
                    (c) => { return (c as InputField).placeholder; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(Graphic); }),
                new ComponentPropertyDefineData("caretBlinkRate",
                    (c) => { return (c as InputField).caretBlinkRate; },
                    (c, value) => { (c as InputField).caretBlinkRate = (float)value; },
                    ChangeDataType.Float, null, null, new RangeValue(0), new RangeValue(4)),
                new ComponentPropertyDefineData("caretWidth",
                    (c) => { return (c as InputField).caretWidth; },
                    (c, value) => { (c as InputField).caretWidth = (int)value; },
                    ChangeDataType.Integer, null, null, new RangeValue(1), new RangeValue(5)),
                new ComponentPropertyDefineData("customCaretColor",
                    (c) => { return (c as InputField).customCaretColor; },
                    (c, value) => { (c as InputField).customCaretColor = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("caretColor",
                    (c) => { return (c as InputField).caretColor; },
                    (c, value) => { (c as InputField).caretColor = (Color)value; },
                    ChangeDataType.Color),
                new ComponentPropertyDefineData("selectionColor",
                    (c) => { return (c as InputField).selectionColor; },
                    (c, value) => { (c as InputField).selectionColor = (Color)value; },
                    ChangeDataType.Color),
                new ComponentPropertyDefineData("shouldHideMobileInput",
                    (c) => { return (c as InputField).shouldHideMobileInput; },
                    (c, value) => { (c as InputField).shouldHideMobileInput = (bool)value; },
                    ChangeDataType.Boolean, "HideMobileInput"),
                new ComponentPropertyDefineData("readOnly",
                    (c) => { return (c as InputField).readOnly; },
                    (c, value) => { (c as InputField).readOnly = (bool)value; },
                    ChangeDataType.Boolean),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(RawImage).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("texture",
                    (c) => { return (c as RawImage).texture; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(Texture); }),
                new ComponentPropertyDefineData("color",
                    (c) => { return (c as RawImage).color; },
                    (c, value) => { (c as RawImage).color = (Color)value; },
                    ChangeDataType.Color),
                new ComponentPropertyDefineData("material",
                    (c) => { return (c as RawImage).material; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(Material); }),
                new ComponentPropertyDefineData("raycastTarget",
                    (c) => { return (c as RawImage).raycastTarget; },
                    (c, value) => { (c as RawImage).raycastTarget = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("uvRect",
                    (c) => { return (c as RawImage).uvRect; },
                    (c, value) => { (c as RawImage).uvRect = (Rect)value; },
                    ChangeDataType.Rect, "UV Rect"),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(Toggle).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("interactable",
                    (c) => { return (c as Toggle).interactable; },
                    (c, value) => { (c as Toggle).interactable = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("isOn",
                    (c) => { return (c as Toggle).isOn; },
                    (c, value) => { (c as Toggle).isOn = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("toggleTransition",
                    (c) => { return (c as Toggle).toggleTransition; },
                    (c, value) => { (c as Toggle).toggleTransition = (Toggle.ToggleTransition)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(Toggle.ToggleTransition); }),
                new ComponentPropertyDefineData("graphic",
                    (c) => { return (c as Toggle).graphic; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(Graphic); }),
                new ComponentPropertyDefineData("group",
                    (c) => { return (c as Toggle).group; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(ToggleGroup); }),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(Dropdown).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("interactable",
                    (c) => { return (c as Dropdown).interactable; },
                    (c, value) => { (c as Dropdown).interactable = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("template",
                    (c) => { return (c as Dropdown).template; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(RectTransform); }),
                new ComponentPropertyDefineData("captionText",
                    (c) => { return (c as Dropdown).captionText; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(Text); }),
                new ComponentPropertyDefineData("captionImage",
                    (c) => { return (c as Dropdown).captionImage; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(Image); }),
                new ComponentPropertyDefineData("itemText",
                    (c) => { return (c as Dropdown).itemText; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(Text); }),
                new ComponentPropertyDefineData("itemImage",
                    (c) => { return (c as Dropdown).itemImage; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(Image); }),
                new ComponentPropertyDefineData("value",
                    (c) => { return (c as Dropdown).value; },
                    (c, value) => { (c as Dropdown).value = (int)value; },
                    ChangeDataType.Integer),
#if UNITY_2019_1_OR_NEWER
                new ComponentPropertyDefineData("alphaFadeSpeed",
                    (c) => { return (c as Dropdown).alphaFadeSpeed; },
                    (c, value) => { (c as Dropdown).alphaFadeSpeed = (float)value; },
                    ChangeDataType.Float),
#endif
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(ScrollRect).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("content",
                    (c) => { return (c as ScrollRect).content; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(RectTransform); }),
                new ComponentPropertyDefineData("horizontal",
                    (c) => { return (c as ScrollRect).horizontal; },
                    (c, value) => { (c as ScrollRect).horizontal = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("vertical",
                    (c) => { return (c as ScrollRect).vertical; },
                    (c, value) => { (c as ScrollRect).vertical = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("movementType",
                    (c) => { return (c as ScrollRect).movementType; },
                    (c, value) => { (c as ScrollRect).movementType = (ScrollRect.MovementType)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(ScrollRect.MovementType); }),
                new ComponentPropertyDefineData("elasticity",
                    (c) => { return (c as ScrollRect).elasticity; },
                    (c, value) => { (c as ScrollRect).elasticity = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("inertia",
                    (c) => { return (c as ScrollRect).inertia; },
                    (c, value) => { (c as ScrollRect).inertia = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("decelerationRate",
                    (c) => { return (c as ScrollRect).decelerationRate; },
                    (c, value) => { (c as ScrollRect).decelerationRate = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("scrollSensitivity",
                    (c) => { return (c as ScrollRect).scrollSensitivity; },
                    (c, value) => { (c as ScrollRect).scrollSensitivity = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("viewport",
                    (c) => { return (c as ScrollRect).viewport; },
                    null,
                    ChangeDataType.ObjectReference),
                new ComponentPropertyDefineData("horizontalScrollbar",
                    (c) => { return (c as ScrollRect).horizontalScrollbar; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(Scrollbar); }),
                new ComponentPropertyDefineData("horizontalScrollbarVisibility",
                    (c) => { return (c as ScrollRect).horizontalScrollbarVisibility; },
                    (c, value) => { (c as ScrollRect).horizontalScrollbarVisibility = (ScrollRect.ScrollbarVisibility)value; },
                    ChangeDataType.Enum, "Visibility",
                    () => { return typeof(ScrollRect.ScrollbarVisibility); }),
                new ComponentPropertyDefineData("horizontalScrollbarSpacing",
                    (c) => { return (c as ScrollRect).horizontalScrollbarSpacing; },
                    (c, value) => { (c as ScrollRect).horizontalScrollbarSpacing = (float)value; },
                    ChangeDataType.Float, "Spacing"),
                new ComponentPropertyDefineData("verticalScrollbar",
                    (c) => { return (c as ScrollRect).verticalScrollbar; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(Scrollbar); }),
                new ComponentPropertyDefineData("verticalScrollbarVisibility",
                    (c) => { return (c as ScrollRect).verticalScrollbarVisibility; },
                    (c, value) => { (c as ScrollRect).verticalScrollbarVisibility = (ScrollRect.ScrollbarVisibility)value; },
                    ChangeDataType.Enum, "Visibility",
                    () => { return typeof(ScrollRect.ScrollbarVisibility); }),
                new ComponentPropertyDefineData("verticalScrollbarSpacing",
                    (c) => { return (c as ScrollRect).verticalScrollbarSpacing; },
                    (c, value) => { (c as ScrollRect).verticalScrollbarSpacing = (float)value; },
                    ChangeDataType.Float, "Spacing"),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(Mask).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("showMaskGraphic",
                    (c) => { return (c as Mask).showMaskGraphic; },
                    (c, value) => { (c as Mask).showMaskGraphic = (bool)value; },
                    ChangeDataType.Boolean),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(Scrollbar).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("interactable",
                    (c) => { return (c as Scrollbar).interactable; },
                    (c, value) => { (c as Scrollbar).interactable = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("handleRect",
                    (c) => { return (c as Scrollbar).handleRect; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(RectTransform); }),
                new ComponentPropertyDefineData("direction",
                    (c) => { return (c as Scrollbar).direction; },
                    (c, value) => { (c as Scrollbar).direction = (Scrollbar.Direction)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(Scrollbar.Direction); }),
                new ComponentPropertyDefineData("value",
                    (c) => { return (c as Scrollbar).value; },
                    (c, value) => { (c as Scrollbar).value = (float)value; },
                    ChangeDataType.Float, null, null, new RangeValue(0), new RangeValue(1)),
                new ComponentPropertyDefineData("size",
                    (c) => { return (c as Scrollbar).size; },
                    (c, value) => { (c as Scrollbar).size = (float)value; },
                    ChangeDataType.Float, null, null, new RangeValue(0), new RangeValue(1)),
                new ComponentPropertyDefineData("numberOfSteps",
                    (c) => { return (c as Scrollbar).numberOfSteps; },
                    (c, value) => { (c as Scrollbar).numberOfSteps = (int)value; },
                    ChangeDataType.Integer, null, null, new RangeValue(0), new RangeValue(11)),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(Selectable).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("interactable",
                    (c) => { return (c as Selectable).interactable; },
                    (c, value) => { (c as Selectable).interactable = (bool)value; },
                    ChangeDataType.Boolean),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(ToggleGroup).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("allowSwitchOff",
                    (c) => { return (c as ToggleGroup).allowSwitchOff; },
                    (c, value) => { (c as ToggleGroup).allowSwitchOff = (bool)value; },
                    ChangeDataType.Boolean),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(LayoutElement).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("ignoreLayout",
                    (c) => { return (c as LayoutElement).ignoreLayout; },
                    (c, value) => { (c as LayoutElement).ignoreLayout = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("minWidth",
                    (c) => { return (c as LayoutElement).minWidth; },
                    (c, value) => { (c as LayoutElement).minWidth = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("minHeight",
                    (c) => { return (c as LayoutElement).minHeight; },
                    (c, value) => { (c as LayoutElement).minHeight = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("preferredWidth",
                    (c) => { return (c as LayoutElement).preferredWidth; },
                    (c, value) => { (c as LayoutElement).preferredWidth = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("preferredHeight",
                    (c) => { return (c as LayoutElement).preferredHeight; },
                    (c, value) => { (c as LayoutElement).preferredHeight = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("flexibleWidth",
                    (c) => { return (c as LayoutElement).flexibleWidth; },
                    (c, value) => { (c as LayoutElement).flexibleWidth = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("flexibleHeight",
                    (c) => { return (c as LayoutElement).flexibleHeight; },
                    (c, value) => { (c as LayoutElement).flexibleHeight = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("layoutPriority",
                    (c) => { return (c as LayoutElement).layoutPriority; },
                    (c, value) => { (c as LayoutElement).layoutPriority = (int)value; },
                    ChangeDataType.Integer),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(GridLayoutGroup).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("padding",
                    (c) => { return (c as GridLayoutGroup).padding; },
                    (c, value) => { (c as GridLayoutGroup).padding = (RectOffset)value; },
                    ChangeDataType.RectOffset),
                new ComponentPropertyDefineData("cellSize",
                    (c) => { return (c as GridLayoutGroup).cellSize; },
                    (c, value) => { (c as GridLayoutGroup).cellSize = (Vector2)value; },
                    ChangeDataType.Vector2),
                new ComponentPropertyDefineData("spacing",
                    (c) => { return (c as GridLayoutGroup).spacing; },
                    (c, value) => { (c as GridLayoutGroup).spacing = (Vector2)value; },
                    ChangeDataType.Vector2),
                new ComponentPropertyDefineData("startCorner",
                    (c) => { return (c as GridLayoutGroup).startCorner; },
                    (c, value) => { (c as GridLayoutGroup).startCorner = (GridLayoutGroup.Corner)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(GridLayoutGroup.Corner); }),
                new ComponentPropertyDefineData("startAxis",
                    (c) => { return (c as GridLayoutGroup).startAxis; },
                    (c, value) => { (c as GridLayoutGroup).startAxis = (GridLayoutGroup.Axis)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(GridLayoutGroup.Axis); }),
                new ComponentPropertyDefineData("childAlignment",
                    (c) => { return (c as GridLayoutGroup).childAlignment; },
                    (c, value) => { (c as GridLayoutGroup).childAlignment = (TextAnchor)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(TextAnchor); }),
                new ComponentPropertyDefineData("constraint",
                    (c) => { return (c as GridLayoutGroup).constraint; },
                    (c, value) => { (c as GridLayoutGroup).constraint = (GridLayoutGroup.Constraint)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(GridLayoutGroup.Constraint); }),
                new ComponentPropertyDefineData("constraintCount",
                    (c) => { return (c as GridLayoutGroup).constraintCount; },
                    (c, value) => { (c as GridLayoutGroup).constraintCount = (int)value; },
                    ChangeDataType.Integer),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(ContentSizeFitter).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("horizontalFit",
                    (c) => { return (c as ContentSizeFitter).horizontalFit; },
                    (c, value) => { (c as ContentSizeFitter).horizontalFit = (ContentSizeFitter.FitMode)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(ContentSizeFitter.FitMode); }),
                new ComponentPropertyDefineData("verticalFit",
                    (c) => { return (c as ContentSizeFitter).verticalFit; },
                    (c, value) => { (c as ContentSizeFitter).verticalFit = (ContentSizeFitter.FitMode)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(ContentSizeFitter.FitMode); }),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(HorizontalLayoutGroup).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("padding",
                    (c) => { return (c as HorizontalLayoutGroup).padding; },
                    (c, value) => { (c as HorizontalLayoutGroup).padding = (RectOffset)value; },
                    ChangeDataType.RectOffset),
                new ComponentPropertyDefineData("spacing",
                    (c) => { return (c as HorizontalLayoutGroup).spacing; },
                    (c, value) => { (c as HorizontalLayoutGroup).spacing = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("childAlignment",
                    (c) => { return (c as HorizontalLayoutGroup).childAlignment; },
                    (c, value) => { (c as HorizontalLayoutGroup).childAlignment = (TextAnchor)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(TextAnchor); }),
                new ComponentPropertyDefineData("childControlWidth",
                    (c) => { return (c as HorizontalLayoutGroup).childControlWidth; },
                    (c, value) => { (c as HorizontalLayoutGroup).childControlWidth = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("childControlHeight",
                    (c) => { return (c as HorizontalLayoutGroup).childControlHeight; },
                    (c, value) => { (c as HorizontalLayoutGroup).childControlHeight = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("childForceExpandWidth",
                    (c) => { return (c as HorizontalLayoutGroup).childForceExpandWidth; },
                    (c, value) => { (c as HorizontalLayoutGroup).childForceExpandWidth = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("childForceExpandHeight",
                    (c) => { return (c as HorizontalLayoutGroup).childForceExpandHeight; },
                    (c, value) => { (c as HorizontalLayoutGroup).childForceExpandHeight = (bool)value; },
                    ChangeDataType.Boolean),
#if UNITY_2019_1_OR_NEWER
                new ComponentPropertyDefineData("childScaleWidth",
                    (c) => { return (c as HorizontalLayoutGroup).childScaleWidth; },
                    (c, value) => { (c as HorizontalLayoutGroup).childScaleWidth = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("childScaleHeight",
                    (c) => { return (c as HorizontalLayoutGroup).childScaleHeight; },
                    (c, value) => { (c as HorizontalLayoutGroup).childScaleHeight = (bool)value; },
                    ChangeDataType.Boolean),
#endif
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(VerticalLayoutGroup).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("padding",
                    (c) => { return (c as VerticalLayoutGroup).padding; },
                    (c, value) => { (c as VerticalLayoutGroup).padding = (RectOffset)value; },
                    ChangeDataType.RectOffset),
                new ComponentPropertyDefineData("spacing",
                    (c) => { return (c as VerticalLayoutGroup).spacing; },
                    (c, value) => { (c as VerticalLayoutGroup).spacing = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("childAlignment",
                    (c) => { return (c as VerticalLayoutGroup).childAlignment; },
                    (c, value) => { (c as VerticalLayoutGroup).childAlignment = (TextAnchor)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(TextAnchor); }),
                new ComponentPropertyDefineData("childControlWidth",
                    (c) => { return (c as VerticalLayoutGroup).childControlWidth; },
                    (c, value) => { (c as VerticalLayoutGroup).childControlWidth = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("childControlHeight",
                    (c) => { return (c as VerticalLayoutGroup).childControlHeight; },
                    (c, value) => { (c as VerticalLayoutGroup).childControlHeight = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("childForceExpandWidth",
                    (c) => { return (c as VerticalLayoutGroup).childForceExpandWidth; },
                    (c, value) => { (c as VerticalLayoutGroup).childForceExpandWidth = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("childForceExpandHeight",
                    (c) => { return (c as VerticalLayoutGroup).childForceExpandHeight; },
                    (c, value) => { (c as VerticalLayoutGroup).childForceExpandHeight = (bool)value; },
                    ChangeDataType.Boolean),
#if UNITY_2019_1_OR_NEWER
                new ComponentPropertyDefineData("childScaleWidth",
                    (c) => { return (c as VerticalLayoutGroup).childScaleWidth; },
                    (c, value) => { (c as VerticalLayoutGroup).childScaleWidth = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("childScaleHeight",
                    (c) => { return (c as VerticalLayoutGroup).childScaleHeight; },
                    (c, value) => { (c as VerticalLayoutGroup).childScaleHeight = (bool)value; },
                    ChangeDataType.Boolean),
#endif
            });
        }

        static void Add2DComponentPropertyDefine()
        {
            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(SpriteRenderer).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("sprite",
                    (c) => { return (c as SpriteRenderer).sprite; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(Sprite); }),
                new ComponentPropertyDefineData("color",
                    (c) => { return (c as SpriteRenderer).color; },
                    (c, value) => { (c as SpriteRenderer).color = (Color)value; },
                    ChangeDataType.Color),
                new ComponentPropertyDefineData("flipX",
                    (c) => { return (c as SpriteRenderer).flipX; },
                    (c, value) => { (c as SpriteRenderer).flipX = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("flipY",
                    (c) => { return (c as SpriteRenderer).flipY; },
                    (c, value) => { (c as SpriteRenderer).flipY = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("material",
                    (c) => { return (c as SpriteRenderer).material; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(Material); }),
                new ComponentPropertyDefineData("drawMode",
                    (c) => { return (c as SpriteRenderer).drawMode; },
                    (c, value) => { (c as SpriteRenderer).drawMode = (SpriteDrawMode)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(SpriteDrawMode); }),
                new ComponentPropertyDefineData("size",
                    (c) => { return (c as SpriteRenderer).size; },
                    (c, value) => { (c as SpriteRenderer).size = (Vector2)value; },
                    ChangeDataType.Vector2),
                new ComponentPropertyDefineData("tileMode",
                    (c) => { return (c as SpriteRenderer).tileMode; },
                    (c, value) => { (c as SpriteRenderer).tileMode = (SpriteTileMode)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(SpriteTileMode); }),
                new ComponentPropertyDefineData("sortingLayerID",
                    (c) => { return (c as SpriteRenderer).sortingLayerID; },
                    (c, value) => { (c as SpriteRenderer).sortingLayerID = (int)value; },
                    SortingLayer.layers, "SortingLayer"),
                new ComponentPropertyDefineData("sortingOrder",
                    (c) => { return (c as SpriteRenderer).sortingOrder; },
                    (c, value) => { (c as SpriteRenderer).sortingOrder = (int)value; },
                    ChangeDataType.Integer, "OrderInLayer"),
                new ComponentPropertyDefineData("maskInteraction",
                    (c) => { return (c as SpriteRenderer).maskInteraction; },
                    (c, value) => { (c as SpriteRenderer).maskInteraction = (SpriteMaskInteraction)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(SpriteMaskInteraction); }),
                new ComponentPropertyDefineData("spriteSortPoint",
                    (c) => { return (c as SpriteRenderer).spriteSortPoint; },
                    (c, value) => { (c as SpriteRenderer).spriteSortPoint = (SpriteSortPoint)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(SpriteSortPoint); }),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(SpriteMask).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("sprite",
                    (c) => { return (c as SpriteMask).sprite; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(Sprite); }),
                new ComponentPropertyDefineData("alphaCutoff",
                    (c) => { return (c as SpriteMask).alphaCutoff; },
                    (c, value) => { (c as SpriteMask).alphaCutoff = (float)value; },
                    ChangeDataType.Float, null, null, new RangeValue(0), new RangeValue(1)),
                new ComponentPropertyDefineData("isCustomRangeActive",
                    (c) => { return (c as SpriteMask).isCustomRangeActive; },
                    (c, value) => { (c as SpriteMask).isCustomRangeActive = (bool)value; },
                    ChangeDataType.Boolean, "Custom Range"),
                new ComponentPropertyDefineData("spriteSortPoint",
                    (c) => { return (c as SpriteMask).spriteSortPoint; },
                    (c, value) => { (c as SpriteMask).spriteSortPoint = (SpriteSortPoint)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(SpriteSortPoint); }),
            });
        }

        static void Add3DComponentPropertyDefine()
        {
            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(Camera).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("clearFlags",
                    (c) => { return (c as Camera).clearFlags; },
                    (c, value) => { (c as Camera).clearFlags = (CameraClearFlags)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(CameraClearFlags); }),
                new ComponentPropertyDefineData("backgroundColor",
                    (c) => { return (c as Camera).backgroundColor; },
                    (c, value) => { (c as Camera).backgroundColor = (Color)value; },
                    ChangeDataType.Color, "background"),
                new ComponentPropertyDefineData("cullingMask",
                    (c) => { return (c as Camera).cullingMask; },
                    (c, value) => { (c as Camera).cullingMask = ((LayerMask)value).value; },
                    ChangeDataType.LayerMask),
                new ComponentPropertyDefineData("orthographic",
                    (c) => { return (c as Camera).orthographic; },
                    (c, value) => { (c as Camera).orthographic = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("fieldOfView",
                    (c) => { return (c as Camera).fieldOfView; },
                    (c, value) => { (c as Camera).fieldOfView = (float)value; },
                    ChangeDataType.Float, null, null, new RangeValue(0.00001f), new RangeValue(179)),
                new ComponentPropertyDefineData("orthographicSize",
                    (c) => { return (c as Camera).orthographicSize; },
                    (c, value) => { (c as Camera).orthographicSize = (float)value; },
                    ChangeDataType.Float, "Size"),
                new ComponentPropertyDefineData("usePhysicalProperties",
                    (c) => { return (c as Camera).usePhysicalProperties; },
                    (c, value) => { (c as Camera).usePhysicalProperties = (bool)value; },
                    ChangeDataType.Boolean, "PhysicalCamera"),

                new ComponentPropertyDefineData("focalLength",
                    (c) => { return (c as Camera).focalLength; },
                    (c, value) => { (c as Camera).focalLength = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("sensorSize",
                    (c) => { return (c as Camera).sensorSize; },
                    (c, value) => { (c as Camera).sensorSize = (Vector2)value; },
                    ChangeDataType.Vector2),
                new ComponentPropertyDefineData("lensShift",
                    (c) => { return (c as Camera).lensShift; },
                    (c, value) => { (c as Camera).lensShift = (Vector2)value; },
                    ChangeDataType.Vector2),
                new ComponentPropertyDefineData("nearClipPlane",
                    (c) => { return (c as Camera).nearClipPlane; },
                    (c, value) => { (c as Camera).nearClipPlane = (float)value; },
                    ChangeDataType.Float, "Near"),
                new ComponentPropertyDefineData("farClipPlane",
                    (c) => { return (c as Camera).farClipPlane; },
                    (c, value) => { (c as Camera).farClipPlane = (float)value; },
                    ChangeDataType.Float, "Far"),
                new ComponentPropertyDefineData("rect",
                    (c) => { return (c as Camera).rect; },
                    (c, value) => { (c as Camera).rect = (Rect)value; },
                    ChangeDataType.Rect, "ViewportRect"),
                new ComponentPropertyDefineData("depth",
                    (c) => { return (c as Camera).depth; },
                    (c, value) => { (c as Camera).depth = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("renderingPath",
                    (c) => { return (c as Camera).renderingPath; },
                    (c, value) => { (c as Camera).renderingPath = (RenderingPath)value; },
                    ChangeDataType.Enum, null,
                    () => { return  typeof(RenderingPath); }),
                new ComponentPropertyDefineData("targetTexture",
                    (c) => { return (c as Camera).targetTexture; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(RenderTexture); }),
                new ComponentPropertyDefineData("useOcclusionCulling",
                    (c) => { return (c as Camera).useOcclusionCulling; },
                    (c, value) => { (c as Camera).useOcclusionCulling = (bool)value; },
                    ChangeDataType.Boolean, "OcclusionCulling"),
                new ComponentPropertyDefineData("allowHDR",
                    (c) => { return (c as Camera).allowHDR; },
                    (c, value) => { (c as Camera).allowHDR = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("allowMSAA",
                    (c) => { return (c as Camera).allowMSAA; },
                    (c, value) => { (c as Camera).allowMSAA = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("allowDynamicResolution",
                    (c) => { return (c as Camera).allowDynamicResolution; },
                    (c, value) => { (c as Camera).allowDynamicResolution = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("targetDisplay",
                    (c) => { return (c as Camera).targetDisplay; },
                    (c, value) => { (c as Camera).targetDisplay = (int)value; },
                    ChangeDataType.TargetDisplay),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(Transform).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("position",
                    (c) => { return (c as Transform).position; },
                    (c, value) => { (c as Transform).position = (Vector3)value; },
                    ChangeDataType.Vector3),
                new ComponentPropertyDefineData("rotation",
                    (c) => { return (c as Transform).rotation; },
                    (c, value) => { (c as Transform).rotation = (Quaternion)value; },
                    ChangeDataType.Quaternion),
                new ComponentPropertyDefineData("localScale",
                    (c) => { return (c as Transform).localScale; },
                    (c, value) => { (c as Transform).localScale = (Vector3)value; },
                    ChangeDataType.Vector3, "scale"),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(BoxCollider).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("isTrigger",
                    (c) => { return (c as BoxCollider).isTrigger; },
                    (c, value) => { (c as BoxCollider).isTrigger = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("center",
                    (c) => { return (c as BoxCollider).center; },
                    (c, value) => { (c as BoxCollider).center = (Vector3)value; },
                    ChangeDataType.Vector3),
                new ComponentPropertyDefineData("size",
                    (c) => { return (c as BoxCollider).size; },
                    (c, value) => { (c as BoxCollider).size = (Vector3)value; },
                    ChangeDataType.Vector3),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(CapsuleCollider).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("isTrigger",
                    (c) => { return (c as CapsuleCollider).isTrigger; },
                    (c, value) => { (c as CapsuleCollider).isTrigger = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("sharedMaterial",
                    (c) => { return (c as CapsuleCollider).sharedMaterial; },
                    null,
                    ChangeDataType.ObjectReference, "material",
                    () => { return typeof(Material); }),
                new ComponentPropertyDefineData("center",
                    (c) => { return (c as CapsuleCollider).center; },
                    (c, value) => { (c as CapsuleCollider).center = (Vector3)value; },
                    ChangeDataType.Vector3),
                new ComponentPropertyDefineData("radius",
                    (c) => { return (c as CapsuleCollider).radius; },
                    (c, value) => { (c as CapsuleCollider).radius = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("height",
                    (c) => { return (c as CapsuleCollider).height; },
                    (c, value) => { (c as CapsuleCollider).height = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("direction",
                    (c) => { return (c as CapsuleCollider).direction; },
                    (c, value) => { (c as CapsuleCollider).direction = (int)value; },
                    new List<int>() { 0, 1, 2 }, new List<string>(){ "X-Axis", "Y-Axis", "Z-Axis" }),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(SphereCollider).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("isTrigger",
                    (c) => { return (c as SphereCollider).isTrigger; },
                    (c, value) => { (c as SphereCollider).isTrigger = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("sharedMaterial",
                    (c) => { return (c as SphereCollider).sharedMaterial; },
                    null,
                    ChangeDataType.ObjectReference, "material",
                    () => { return typeof(Material); }),
                new ComponentPropertyDefineData("center",
                    (c) => { return (c as SphereCollider).center; },
                    (c, value) => { (c as SphereCollider).center = (Vector3)value; },
                    ChangeDataType.Vector3),
                new ComponentPropertyDefineData("radius",
                    (c) => { return (c as SphereCollider).radius; },
                    (c, value) => { (c as SphereCollider).radius = (float)value; },
                    ChangeDataType.Float),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(TerrainCollider).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("sharedMaterial",
                    (c) => { return (c as TerrainCollider).sharedMaterial; },
                    null,
                    ChangeDataType.ObjectReference, "material",
                    () => { return typeof(Material); }),
                new ComponentPropertyDefineData("terrainData",
                    (c) => { return (c as TerrainCollider).terrainData; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(TerrainData); }),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(MeshRenderer).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("lightProbeUsage",
                    (c) => { return (c as MeshRenderer).lightProbeUsage; },
                    (c, value) => { (c as MeshRenderer).lightProbeUsage = (LightProbeUsage)value; },
                    ChangeDataType.Enum, "LightProbes",
                    () => { return typeof(LightProbeUsage); }),
                new ComponentPropertyDefineData("reflectionProbeUsage",
                    (c) => { return (c as MeshRenderer).reflectionProbeUsage; },
                    (c, value) => { (c as MeshRenderer).reflectionProbeUsage = (ReflectionProbeUsage)value; },
                    ChangeDataType.Enum, "reflectionProbes",
                    () => { return typeof(ReflectionProbeUsage); }),
                new ComponentPropertyDefineData("probeAnchor",
                    (c) => { return (c as MeshRenderer).probeAnchor; },
                    null,
                    ChangeDataType.ObjectReference, "AnchorOverride",
                    () => { return typeof(Transform); }),
                new ComponentPropertyDefineData("shadowCastingMode",
                    (c) => { return (c as MeshRenderer).shadowCastingMode; },
                    (c, value) => { (c as MeshRenderer).shadowCastingMode = (ShadowCastingMode)value; },
                    ChangeDataType.Enum, "CastShadows",
                    () => { return typeof(ShadowCastingMode); }),
                new ComponentPropertyDefineData("receiveShadows",
                    (c) => { return (c as MeshRenderer).receiveShadows; },
                    (c, value) => { (c as MeshRenderer).receiveShadows = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("motionVectorGenerationMode",
                    (c) => { return (c as MeshRenderer).motionVectorGenerationMode; },
                    (c, value) => { (c as MeshRenderer).motionVectorGenerationMode = (MotionVectorGenerationMode)value; },
                    ChangeDataType.Enum, "MontionVectors",
                    () => { return typeof(MotionVectorGenerationMode); }),
                new ComponentPropertyDefineData("allowOcclusionWhenDynamic",
                    (c) => { return (c as MeshRenderer).allowOcclusionWhenDynamic; },
                    (c, value) => { (c as MeshRenderer).allowOcclusionWhenDynamic = (bool)value; },
                    ChangeDataType.Boolean, "DynamicOccluded"),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(Rigidbody).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("mass",
                    (c) => { return (c as Rigidbody).mass; },
                    (c, value) => { (c as Rigidbody).mass = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("drag",
                    (c) => { return (c as Rigidbody).drag; },
                    (c, value) => { (c as Rigidbody).drag = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("angularDrag",
                    (c) => { return (c as Rigidbody).angularDrag; },
                    (c, value) => { (c as Rigidbody).angularDrag = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("useGravity",
                    (c) => { return (c as Rigidbody).useGravity; },
                    (c, value) => { (c as Rigidbody).useGravity = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("isKinematic",
                    (c) => { return (c as Rigidbody).isKinematic; },
                    (c, value) => { (c as Rigidbody).isKinematic = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("interpolation",
                    (c) => { return (c as Rigidbody).interpolation; },
                    (c, value) => { (c as Rigidbody).interpolation = (RigidbodyInterpolation)value; },
                    ChangeDataType.Enum, "interpolate",
                    () => { return typeof(RigidbodyInterpolation); }),
                new ComponentPropertyDefineData("collisionDetectionMode",
                    (c) => { return (c as Rigidbody).collisionDetectionMode; },
                    (c, value) => { (c as Rigidbody).collisionDetectionMode = (CollisionDetectionMode)value; },
                    ChangeDataType.Enum, "collisionDetection",
                    () => { return typeof(CollisionDetectionMode); }),
                new ComponentPropertyDefineData("constraints",
                    (c) => { return (c as Rigidbody).constraints; },
                    (c, value) => { (c as Rigidbody).constraints = (RigidbodyConstraints)value; },
                    ChangeDataType.Flags, null,
                    () => { return typeof(RigidbodyConstraints); }),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(SkinnedMeshRenderer).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("renderingLayerMask",
                    (c) => { return (c as SkinnedMeshRenderer).renderingLayerMask; },
                    (c, value) => { (c as SkinnedMeshRenderer).renderingLayerMask = (uint)value; },
                    ChangeDataType.UInt),
                new ComponentPropertyDefineData("quality",
                    (c) => { return (c as SkinnedMeshRenderer).quality; },
                    (c, value) => { (c as SkinnedMeshRenderer).quality = (SkinQuality)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(SkinQuality); }),
                new ComponentPropertyDefineData("updateWhenOffscreen",
                    (c) => { return (c as SkinnedMeshRenderer).updateWhenOffscreen; },
                    (c, value) => { (c as SkinnedMeshRenderer).updateWhenOffscreen = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("skinnedMotionVectors",
                    (c) => { return (c as SkinnedMeshRenderer).skinnedMotionVectors; },
                    (c, value) => { (c as SkinnedMeshRenderer).skinnedMotionVectors = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("sharedMesh",
                    (c) => { return (c as SkinnedMeshRenderer).sharedMesh; },
                    null,
                    ChangeDataType.ObjectReference, "mesh",
                    () => { return typeof(Mesh); }),
                new ComponentPropertyDefineData("rootBone",
                    (c) => { return (c as SkinnedMeshRenderer).rootBone; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(Transform); }),

                // TODO Struct Bones

                new ComponentPropertyDefineData("lightProbeUsage",
                    (c) => { return (c as SkinnedMeshRenderer).lightProbeUsage; },
                    (c, value) => { (c as SkinnedMeshRenderer).lightProbeUsage = (LightProbeUsage)value; },
                    ChangeDataType.Enum, "LightProbes",
                    () => { return typeof(LightProbeUsage); }),
                new ComponentPropertyDefineData("reflectionProbeUsage",
                    (c) => { return (c as SkinnedMeshRenderer).reflectionProbeUsage; },
                    (c, value) => { (c as SkinnedMeshRenderer).reflectionProbeUsage = (ReflectionProbeUsage)value; },
                    ChangeDataType.Enum, "reflectionProbes",
                    () => { return typeof(ReflectionProbeUsage); }),
                new ComponentPropertyDefineData("probeAnchor",
                    (c) => { return (c as SkinnedMeshRenderer).probeAnchor; },
                    null,
                    ChangeDataType.ObjectReference, "AnchorOverride",
                    () => { return typeof(Transform); }),
                new ComponentPropertyDefineData("shadowCastingMode",
                    (c) => { return (c as SkinnedMeshRenderer).shadowCastingMode; },
                    (c, value) => { (c as SkinnedMeshRenderer).shadowCastingMode = (ShadowCastingMode)value; },
                    ChangeDataType.Enum, "CastShadows",
                    () => { return typeof(ShadowCastingMode); }),
                new ComponentPropertyDefineData("receiveShadows",
                    (c) => { return (c as SkinnedMeshRenderer).receiveShadows; },
                    (c, value) => { (c as SkinnedMeshRenderer).receiveShadows = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("motionVectorGenerationMode",
                    (c) => { return (c as SkinnedMeshRenderer).motionVectorGenerationMode; },
                    (c, value) => { (c as SkinnedMeshRenderer).motionVectorGenerationMode = (MotionVectorGenerationMode)value; },
                    ChangeDataType.Enum, "MontionVectors",
                    () => { return typeof(MotionVectorGenerationMode); }),

                // TODO ListMaterials

                new ComponentPropertyDefineData("allowOcclusionWhenDynamic",
                    (c) => { return (c as SkinnedMeshRenderer).allowOcclusionWhenDynamic; },
                    (c, value) => { (c as SkinnedMeshRenderer).allowOcclusionWhenDynamic = (bool)value; },
                    ChangeDataType.Boolean, "DynamicOccluded"),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(MeshCollider).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("convex",
                    (c) => { return (c as MeshCollider).convex; },
                    (c, value) => { (c as MeshCollider).convex = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("isTrigger",
                    (c) => { return (c as MeshCollider).isTrigger; },
                    (c, value) => { (c as MeshCollider).isTrigger = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("cookingOptions",
                    (c) => { return (c as MeshCollider).cookingOptions; },
                    (c, value) => { (c as MeshCollider).cookingOptions = (MeshColliderCookingOptions)value; },
                    ChangeDataType.Flags, null,
                    () => { return typeof(MeshColliderCookingOptions); }),
                new ComponentPropertyDefineData("sharedMaterial",
                    (c) => { return (c as MeshCollider).sharedMaterial; },
                    null,
                    ChangeDataType.ObjectReference, "Material",
                    () => { return typeof(Material); }),
                new ComponentPropertyDefineData("sharedMesh",
                    (c) => { return (c as MeshCollider).sharedMesh; },
                    null,
                    ChangeDataType.ObjectReference, "Mesh",
                    () => { return typeof(Mesh); }),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(Animator).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("runtimeAnimatorController",
                    (c) => { return (c as Animator).runtimeAnimatorController; },
                    null,
                    ChangeDataType.ObjectReference, "Controller",
                    () => { return typeof(RuntimeAnimatorController); }),
                new ComponentPropertyDefineData("avatar",
                    (c) => { return (c as Animator).avatar; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(Avatar); }),
                new ComponentPropertyDefineData("applyRootMotion",
                    (c) => { return (c as Animator).applyRootMotion; },
                    (c, value) => { (c as Animator).applyRootMotion = (bool)value; },
                    ChangeDataType.Boolean),
                new ComponentPropertyDefineData("updateMode",
                    (c) => { return (c as Animator).updateMode; },
                    (c, value) => { (c as Animator).updateMode = (AnimatorUpdateMode)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(AnimatorUpdateMode); }),
                new ComponentPropertyDefineData("cullingMode",
                    (c) => { return (c as Animator).cullingMode; },
                    (c, value) => { (c as Animator).cullingMode = (AnimatorCullingMode)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(AnimatorCullingMode); }),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(Light).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("type",
                    (c) => { return (c as Light).type; },
                    (c, value) => { (c as Light).type = (LightType)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(LightType); }),
                new ComponentPropertyDefineData("range",
                    (c) => { return (c as Light).range; },
                    (c, value) => { (c as Light).range = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("spotAngle",
                    (c) => { return (c as Light).spotAngle; },
                    (c, value) => { (c as Light).spotAngle = (float)value; },
                    ChangeDataType.Float, null, null, new RangeValue(1), new RangeValue(179)),
                new ComponentPropertyDefineData("color",
                    (c) => { return (c as Light).color; },
                    (c, value) => { (c as Light).color = (Color)value; },
                    ChangeDataType.Color),
                new ComponentPropertyDefineData("intensity",
                    (c) => { return (c as Light).intensity; },
                    (c, value) => { (c as Light).intensity = (float)value; },
                    ChangeDataType.Float),
                new ComponentPropertyDefineData("bounceIntensity",
                    (c) => { return (c as Light).bounceIntensity; },
                    (c, value) => { (c as Light).bounceIntensity = (float)value; },
                    ChangeDataType.Float, "Indirect Multiplier"),
                new ComponentPropertyDefineData("shadows",
                    (c) => { return (c as Light).shadows; },
                    (c, value) => { (c as Light).shadows = (LightShadows)value; },
                    ChangeDataType.Enum, "ShadowType",
                    () => { return typeof(LightShadows); }),

                new ComponentPropertyDefineData("shadowStrength",
                    (c) => { return (c as Light).shadowStrength; },
                    (c, value) => { (c as Light).shadowStrength = (float)value; },
                    ChangeDataType.Float, "Strength", null, new RangeValue(0), new RangeValue(1)),
                new ComponentPropertyDefineData("shadowResolution",
                    (c) => { return (c as Light).shadowResolution; },
                    (c, value) => { (c as Light).shadowResolution = (LightShadowResolution)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(LightShadowResolution); }),
                new ComponentPropertyDefineData("shadowBias",
                    (c) => { return (c as Light).shadowBias; },
                    (c, value) => { (c as Light).shadowBias = (float)value; },
                    ChangeDataType.Float, "Bias", null, new RangeValue(0), new RangeValue(2)),
                new ComponentPropertyDefineData("shadowNormalBias",
                    (c) => { return (c as Light).shadowNormalBias; },
                    (c, value) => { (c as Light).shadowNormalBias = (float)value; },
                    ChangeDataType.Float, "NormalBias", null, new RangeValue(0), new RangeValue(3)),
                new ComponentPropertyDefineData("shadowNearPlane",
                    (c) => { return (c as Light).shadowNearPlane; },
                    (c, value) => { (c as Light).shadowNearPlane = (float)value; },
                    ChangeDataType.Float, "NearPlane", null, new RangeValue(0.1f), new RangeValue(10)),
                new ComponentPropertyDefineData("cookie",
                    (c) => { return (c as Light).cookie; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(Texture); }),
                new ComponentPropertyDefineData("flare",
                    (c) => { return (c as Light).flare; },
                    null,
                    ChangeDataType.ObjectReference, null,
                    () => { return typeof(Flare); }),
                new ComponentPropertyDefineData("renderMode",
                    (c) => { return (c as Light).renderMode; },
                    (c, value) => { (c as Light).renderMode = (LightRenderMode)value; },
                    ChangeDataType.Enum, null,
                    () => { return typeof(LightRenderMode); }),
                new ComponentPropertyDefineData("cullingMask",
                    (c) => { return (c as Light).cullingMask; },
                    (c, value) => { (c as Light).cullingMask = ((LayerMask)value).value; },
                    ChangeDataType.LayerMask),
            });

            ComponentPropertyDefine.AddComponentPropertyDefine(typeof(ParticleSystem).FullName, new List<ComponentPropertyDefineData>()
            {
                new ComponentPropertyDefineData("main",
                    (c) => { return (c as ParticleSystem).main; },
                    null,
                    ChangeDataType.Struct),
                new ComponentPropertyDefineData("useAutoRandomSeed",
                    (c) => { return (c as ParticleSystem).useAutoRandomSeed; },
                    (c, value) => { (c as ParticleSystem).useAutoRandomSeed = (bool)value; },
                    ChangeDataType.Boolean, "AutoRandomSeed"),
                new ComponentPropertyDefineData("randomSeed",
                    (c) => { return (c as ParticleSystem).randomSeed; },
                    (c, value) => { (c as ParticleSystem).randomSeed = (uint)value; },
                    ChangeDataType.UInt),
                new ComponentPropertyDefineData("velocityOverLifetime",
                    (c) => { return (c as ParticleSystem).velocityOverLifetime; },
                    null,
                    ChangeDataType.Struct),
            });
        }
    }
}

